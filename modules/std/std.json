{
  "module":{
    "name":"std"
    ,"namespaces":[
      {
        "ident":"std"
        ,"namespaces":[
          {
            "ident":"chartype"
            ,"functions":[
              {
                "ident":"IsAlpha"
                ,"docs":"<p>Checks if a character is alphabetic.</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                      ,"docs":"<p>True if <code>ch</code> is &#39;a&#39;-&#39;z&#39; or &#39;A&#39;-&#39;Z&#39;.</p>\n"
                    }
                    ,"params":[
                      {
                        "ident":"ch"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"IsDigit"
                ,"docs":"<p>Checks if a character is a decimal digit.</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                      ,"docs":"<p>True if <code>ch</code> is &#39;0&#39;-&#39;9&#39;.</p>\n"
                    }
                    ,"params":[
                      {
                        "ident":"ch"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"IsHexDigit"
                ,"docs":"<p>Checks if a character is a hexadecimal digit.</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                      ,"docs":"<p>True if <code>ch</code> is &#39;0&#39;-&#39;9&#39;, &#39;a&#39;-&#39;f&#39;, or &#39;A&#39;-&#39;F&#39;.</p>\n"
                    }
                    ,"params":[
                      {
                        "ident":"ch"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"IsIdent"
                ,"docs":"<p>Checks if a character is an identifier.</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                      ,"docs":"<p>True if <code>ch</code> is &#39;0&#39;-&#39;9&#39;, &#39;a&#39;-&#39;z&#39;, &#39;A&#39;-&#39;Z&#39; or &#39;_&#39;.</p>\n"
                    }
                    ,"params":[
                      {
                        "ident":"ch"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"IsSpace"
                ,"docs":"<p>Checks if a character is whitespace.</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                      ,"docs":"<p>True if <code>char</code> is 32 or less.</p>\n"
                    }
                    ,"params":[
                      {
                        "ident":"ch"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"fiber"
            ,"classes":[
              {
                "ident":"Future"
                ,"flags":1
                ,"genArgs":"T"
                ,"superType":"monkey.Object"
                ,"fields":[
                  {
                    "ident":"_fiber"
                    ,"flags":1
                    ,"type":"monkey.Int"
                  }
                  ,{
                    "ident":"_value"
                    ,"flags":1
                    ,"type":"T"
                  }
                ]
                ,"constructors":[
                  {
                    "ident":"new"
                  }
                ]
                ,"methods":[
                  {
                    "ident":"Get"
                    ,"overloads":[
                      {
                        "return":{
                          "type":"T"
                        }
                      }
                    ]
                  }
                  ,{
                    "ident":"Set"
                  }
                ]
              }
            ]
            ,"functions":[
              {
                "ident":"Await"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T"
                    }
                  }
                ]
              }
              ,{
                "ident":"CreateFiber"
                ,"docs":"<p>Creates a new suspended fiber.</p>\n\n<p>Use <code>ResumeFiber</code> to start the fiber running.</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                      ,"docs":"<p>a new fiber handle.</p>\n"
                    }
                  }
                ]
              }
              ,{
                "ident":"GetCurrentFiber"
                ,"docs":"<p>Gets the handle of the currently running fiber.</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                      ,"docs":"<p>the handle of the currnt fiber.</p>\n"
                    }
                  }
                ]
              }
              ,{
                "ident":"ResumeFiber"
                ,"docs":"<p>Resumes a suspended fiber.</p>\n"
              }
              ,{
                "ident":"StartFiber"
                ,"docs":"<p>Starts a new running fiber.</p>\n\n<p>This is the same as using <code>CreateFiber</code> followed by <code>ResumeFiber</code>.</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                      ,"docs":"<p>a new fiber handle.</p>\n"
                    }
                  }
                ]
              }
              ,{
                "ident":"SuspendCurrentFiber"
                ,"docs":"<p>Suspends the currently running fiber.</p>\n\n<p>The fiber will remain suspended until <code>ResumeFiber</code> or <code>TerminateFiber</code> is used.</p>\n"
              }
              ,{
                "ident":"TerminateFiber"
                ,"docs":"<p>Terminates a fiber.</p>\n"
              }
            ]
          }
          ,{
            "ident":"filesystem"
            ,"constants":[
              {
                "ident":"FILETYPE_DIR"
                ,"flags":1
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"FILETYPE_FILE"
                ,"flags":1
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"FILETYPE_NONE"
                ,"flags":1
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"FILETYPE_UNKNOWN"
                ,"flags":1
                ,"type":"monkey.Int"
              }
            ]
            ,"functions":[
              {
                "ident":"AppArgs"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String[]"
                    }
                  }
                ]
              }
              ,{
                "ident":"AppDir"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                  }
                ]
              }
              ,{
                "ident":"AppPath"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                  }
                ]
              }
              ,{
                "ident":"AssetsDir"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                  }
                ]
              }
              ,{
                "ident":"ChangeDir"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"CopyFile"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"CreateDir"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                      ,{
                        "ident":"recursive"
                        ,"flags":1
                        ,"type":"monkey.Bool"
                        ,"default":"true"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"CurrentDir"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                  }
                ]
              }
              ,{
                "ident":"DeleteAll"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"DeleteDir"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                      ,{
                        "ident":"recursive"
                        ,"flags":1
                        ,"type":"monkey.Bool"
                        ,"default":"true"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"DeleteFile"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"ExtractDir"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"ExtractExt"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"ExtractRootDir"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"FileTime"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Long"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"FileType"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"IsRealPath"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"IsRootDir"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"LoadDir"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String[]"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"RealPath"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"StripDir"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"StripExt"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"StripSlashes"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"random"
            ,"functions":[
              {
                "ident":"Rnd"
                ,"docs":"<p>Generate a random float value in the range 0 (inclusive) to 1 (exclusive).</p>\n\n<p>Generate a random float value in the range 0 (inclusive) to <code>max</code> (exclusive).</p>\n\n<p>Generate a random float value in the range <code>min</code> (inclusive) to <code>max</code> (exclusive).</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Float"
                      ,"docs":"<p>a random float value in the range [<code>min</code>,<code>max</code>).</p>\n"
                    }
                  }
                  ,{
                    "return":{
                      "type":"monkey.Float"
                      ,"docs":"<p>a random float value in the range [<code>min</code>,<code>max</code>).</p>\n"
                    }
                    ,"params":[
                      {
                        "ident":"max"
                        ,"flags":1
                        ,"type":"monkey.Float"
                      }
                    ]
                  }
                  ,{
                    "return":{
                      "type":"monkey.Float"
                      ,"docs":"<p>a random float value in the range [<code>min</code>,<code>max</code>).</p>\n"
                    }
                    ,"params":[
                      {
                        "ident":"min"
                        ,"flags":1
                        ,"type":"monkey.Float"
                      }
                      ,{
                        "ident":"max"
                        ,"flags":1
                        ,"type":"monkey.Float"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"RndULong"
                ,"docs":"<p>Generates a random unsigned long value.</p>\n\n<p>This is the core function used by all other functions in the random namespace that generate random numbers.</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Ulong"
                      ,"docs":"<p>a random unsigned long value.</p>\n"
                    }
                  }
                ]
              }
              ,{
                "ident":"SeedRnd"
                ,"docs":"<p>Seed the random number generator.</p>\n"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"seed"
                        ,"docs":"<p>the seed value.</p>\n"
                        ,"flags":1
                        ,"type":"monkey.Ulong"
                      }
                    ]
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"stream"
          }
          ,{
            "ident":"stringio"
            ,"functions":[
              {
                "ident":"LoadString"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"SaveString"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"str"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                      ,{
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
        ,"aliases":[
          {
            "ident":"Mat4f"
            ,"flags":1
            ,"type":"std.Mat4<monkey.Float>"
          }
          ,{
            "ident":"Rectf"
            ,"flags":1
            ,"type":"std.Rect<monkey.Float>"
          }
          ,{
            "ident":"Recti"
            ,"flags":1
            ,"type":"std.Rect<monkey.Int>"
          }
          ,{
            "ident":"Vec2f"
            ,"flags":1
            ,"type":"std.Vec2<monkey.Float>"
          }
          ,{
            "ident":"Vec2i"
            ,"flags":1
            ,"type":"std.Vec2<monkey.Int>"
          }
          ,{
            "ident":"Vec3f"
            ,"flags":1
            ,"type":"std.Vec3<monkey.Float>"
          }
          ,{
            "ident":"Vec3i"
            ,"flags":1
            ,"type":"std.Vec3<monkey.Int>"
          }
          ,{
            "ident":"Vec4f"
            ,"flags":1
            ,"type":"std.Vec4<monkey.Float>"
          }
          ,{
            "ident":"Vec4i"
            ,"flags":1
            ,"type":"std.Vec4<monkey.Int>"
          }
        ]
        ,"enums":[
          {
            "ident":"PixmapFormat"
            ,"docs":"<p>Valid pixmap formats</p>\n"
            ,"flags":1
          }
        ]
        ,"classes":[
          {
            "ident":"DataBuffer"
            ,"flags":1
            ,"superType":"monkey.Object"
            ,"fields":[
              {
                "ident":"_data"
                ,"flags":2
                ,"type":"monkey.Ubyte Ptr"
              }
              ,{
                "ident":"_length"
                ,"flags":2
                ,"type":"monkey.Int"
              }
            ]
            ,"constructors":[
              {
                "ident":"new"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"length"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                ]
              }
            ]
            ,"properties":[
              {
                "ident":"Data"
                ,"docs":"<p>The underlying raw memory buffer.</p>\n"
                ,"flags":1
                ,"type":"monkey.Ubyte Ptr"
              }
              ,{
                "ident":"Length"
                ,"docs":"<p>The length of the data in bytes.</p>\n"
                ,"flags":1
                ,"type":"monkey.Int"
              }
            ]
            ,"methods":[
              {
                "ident":"CopyData"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"srcAddress"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                      ,{
                        "ident":"dst"
                        ,"flags":1
                        ,"type":"std.DataBuffer"
                      }
                      ,{
                        "ident":"dstAddress"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                      ,{
                        "ident":"count"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"Data"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Ubyte Ptr"
                    }
                  }
                ]
              }
              ,{
                "ident":"Discard"
              }
              ,{
                "ident":"Length"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"DataStream"
            ,"flags":1
            ,"superType":"std.Stream"
            ,"fields":[
              {
                "ident":"_buf"
                ,"flags":2
                ,"type":"std.DataBuffer"
              }
              ,{
                "ident":"_pos"
                ,"flags":2
                ,"type":"monkey.Int"
              }
            ]
            ,"constructors":[
              {
                "ident":"new"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"buf"
                        ,"flags":1
                        ,"type":"std.DataBuffer"
                      }
                    ]
                  }
                ]
              }
            ]
            ,"properties":[
              {
                "ident":"Eof"
                ,"flags":1
                ,"type":"monkey.Bool"
              }
              ,{
                "ident":"Length"
                ,"flags":1
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"Position"
                ,"flags":1
                ,"type":"monkey.Int"
              }
            ]
            ,"methods":[
              {
                "ident":"Close"
              }
              ,{
                "ident":"Eof"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"Length"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
              ,{
                "ident":"Position"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
              ,{
                "ident":"Read"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                    ,"params":[
                      {
                        "ident":"buf"
                        ,"flags":1
                        ,"type":"Void Ptr"
                      }
                      ,{
                        "ident":"count"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                  ,{
                    "return":{
                      "type":"monkey.Int"
                    }
                    ,"params":[
                      {
                        "ident":"buf"
                        ,"flags":1
                        ,"type":"std.DataBuffer"
                      }
                      ,{
                        "ident":"offset"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                      ,{
                        "ident":"count"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"Seek"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"position"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"Write"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                    ,"params":[
                      {
                        "ident":"buf"
                        ,"flags":1
                        ,"type":"Void Ptr"
                      }
                      ,{
                        "ident":"count"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                  ,{
                    "return":{
                      "type":"monkey.Int"
                    }
                    ,"params":[
                      {
                        "ident":"buf"
                        ,"flags":1
                        ,"type":"std.DataBuffer"
                      }
                      ,{
                        "ident":"offset"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                      ,{
                        "ident":"count"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"FileStream"
            ,"flags":1
            ,"superType":"std.Stream"
            ,"fields":[
              {
                "ident":"_end"
                ,"flags":2
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"_file"
                ,"flags":2
                ,"type":"lib.c.FILE Ptr"
              }
              ,{
                "ident":"_pos"
                ,"flags":2
                ,"type":"monkey.Int"
              }
            ]
            ,"constructors":[
              {
                "ident":"new"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"cfile"
                        ,"flags":1
                        ,"type":"lib.c.FILE Ptr"
                      }
                    ]
                  }
                ]
              }
            ]
            ,"properties":[
              {
                "ident":"Eof"
                ,"docs":"<p>Returns true if the stream position is at the end of the file.</p>\n"
                ,"flags":1
                ,"type":"monkey.Bool"
              }
              ,{
                "ident":"Length"
                ,"docs":"<p>Returns the length of the file stream - ie: the length of the file.</p>\n\n<p>The file length can change if you write past the end of file.</p>\n"
                ,"flags":1
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"Position"
                ,"docs":"<p>Returns the current read/write position.</p>\n"
                ,"flags":1
                ,"type":"monkey.Int"
              }
            ]
            ,"methods":[
              {
                "ident":"Close"
                ,"docs":"<p>Closes the stream.</p>\n"
              }
              ,{
                "ident":"Eof"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"Length"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"FloatList"
            ,"flags":1
            ,"superType":"std.List<monkey.Float>"
          }
          ,{
            "ident":"FloatMap"
            ,"flags":1
            ,"genArgs":"T"
            ,"superType":"std.Map<monkey.Float,T>"
          }
          ,{
            "ident":"FloatStack"
            ,"flags":1
            ,"superType":"std.Stack<monkey.Float>"
          }
          ,{
            "ident":"Generator"
            ,"flags":1
            ,"genArgs":"T"
            ,"superType":"monkey.Object"
            ,"fields":[
              {
                "ident":"_fiber"
                ,"flags":2
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"_hasNext"
                ,"flags":2
                ,"type":"monkey.Bool"
              }
              ,{
                "ident":"_next"
                ,"flags":2
                ,"type":"T"
              }
            ]
            ,"properties":[
              {
                "ident":"HasNext"
                ,"flags":1
                ,"type":"monkey.Bool"
              }
            ]
            ,"methods":[
              {
                "ident":"GetNext"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T"
                    }
                  }
                ]
              }
              ,{
                "ident":"HasNext"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"Start"
              }
              ,{
                "ident":"Yield"
              }
            ]
          }
          ,{
            "ident":"IntList"
            ,"flags":1
            ,"superType":"std.List<monkey.Int>"
          }
          ,{
            "ident":"IntMap"
            ,"flags":1
            ,"genArgs":"T"
            ,"superType":"std.Map<monkey.Int,T>"
          }
          ,{
            "ident":"IntStack"
            ,"flags":1
            ,"superType":"std.Stack<monkey.Int>"
          }
          ,{
            "ident":"List"
            ,"docs":"<p>The List class provides support for doubly linked lists.</p>\n\n<p>Values can be added to a list using [[AddLast]], [[AddFirst]], [[InsertBefore]] and [[InsertAfter]]and removed from a list using [[Remove]], [[RemoveEach]], [[RemoveFirst]] and [[RemoveLast]].</p>\n\n<p>Lists can be sorted using [[Sort]].</p>\n"
            ,"flags":1
            ,"genArgs":"T"
            ,"superType":"monkey.Object"
            ,"ifaceTypes":["std.IContainer<T>"]
            ,"classes":[
              {
                "ident":"Node"
                ,"flags":1
                ,"superType":"monkey.Object"
                ,"fields":[
                  {
                    "ident":"_pred"
                    ,"flags":1
                    ,"type":"std.Node"
                  }
                  ,{
                    "ident":"_succ"
                    ,"flags":1
                    ,"type":"std.Node"
                  }
                  ,{
                    "ident":"_value"
                    ,"flags":1
                    ,"type":"T"
                  }
                ]
                ,"constructors":[
                  {
                    "ident":"new"
                  }
                ]
                ,"properties":[
                  {
                    "ident":"Pred"
                    ,"flags":1
                    ,"type":"std.Node"
                  }
                  ,{
                    "ident":"Succ"
                    ,"flags":1
                    ,"type":"std.Node"
                  }
                  ,{
                    "ident":"Value"
                    ,"flags":1
                    ,"type":"T"
                  }
                ]
                ,"methods":[
                  {
                    "ident":"Insert"
                  }
                  ,{
                    "ident":"Pred"
                    ,"overloads":[
                      {
                        "return":{
                          "type":"std.Node"
                        }
                      }
                    ]
                  }
                  ,{
                    "ident":"Remove"
                  }
                  ,{
                    "ident":"Succ"
                    ,"overloads":[
                      {
                        "return":{
                          "type":"std.Node"
                        }
                      }
                    ]
                  }
                  ,{
                    "ident":"Value"
                    ,"overloads":[
                      {
                        "return":{
                          "type":"T"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
            ,"fields":[
              {
                "ident":"_head"
                ,"flags":1
                ,"type":"std.Node"
              }
            ]
            ,"constructors":[
              {
                "ident":"new"
                ,"docs":"<p>Create a new empty list\nCreate a new list with the contents of an array</p>\n"
              }
            ]
            ,"properties":[
              {
                "ident":"Empty"
                ,"docs":"<p>Check whether a list is empty</p>\n"
                ,"flags":1
                ,"type":"monkey.Bool"
              }
              ,{
                "ident":"First"
                ,"docs":"<p>Gets the first value in the list.</p>\n\n<pre><code>If the list is empty, a RuntimeError exception is thrown.\n\n@return The first value in the list.\n</code></pre>\n"
                ,"flags":1
                ,"type":"T"
              }
              ,{
                "ident":"Last"
                ,"docs":"<p>Get the last item in a list</p>\n\n<pre><code>If the list is empty, a RuntimeError exception is thrown.\n\n@return the last item in the list.\n</code></pre>\n"
                ,"flags":1
                ,"type":"T"
              }
            ]
            ,"methods":[
              {
                "ident":"AddFirst"
                ,"docs":"<p>Add a value to the start of a list</p>\n\n<pre><code>@param value the value to add to the list.\n</code></pre>\n"
              }
              ,{
                "ident":"AddLast"
                ,"docs":"<p>Add a value to the end of a list</p>\n\n<pre><code>@param value the value to add to the list.\n</code></pre>\n"
              }
              ,{
                "ident":"Clear"
                ,"docs":"<p>Remove all items from a list</p>\n"
              }
              ,{
                "ident":"Count"
                ,"docs":"<p>Counts the number of values in the list.</p>\n\n<pre><code>This method iterates through the entire list to count values, so may be slow with large \nlists. If you just want to find out whether a list is empty or not, use [[Empty]] instead.\n\n@return The number of items in the list.\n\n@see Empty\n</code></pre>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
              ,{
                "ident":"Empty"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"First"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T"
                    }
                  }
                ]
              }
              ,{
                "ident":"GetIterator"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.Iterator"
                    }
                  }
                ]
              }
              ,{
                "ident":"Last"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T"
                    }
                  }
                ]
              }
              ,{
                "ident":"RemoveFirst"
                ,"docs":"<p>Removes the first item in the list and returns it.</p>\n\n<p>If the list is empty, a RuntimeError exception is thrown.</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T"
                      ,"docs":"<p>the first item in the list before the method was called.</p>\n"
                    }
                  }
                ]
              }
              ,{
                "ident":"RemoveLast"
                ,"docs":"<p>Removes the last item in the list and returns it.</p>\n\n<p>If the list is empty, a RuntimeError exception is thrown.</p>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T"
                      ,"docs":"<p>the last item in the list before the method was called.</p>\n"
                    }
                  }
                ]
              }
              ,{
                "ident":"ToArray"
                ,"docs":"<p>Convert a list to an array.</p>\n\n<pre><code>@return an array containing the items in the list.\n</code></pre>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T[]"
                    }
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"Map"
            ,"flags":1
            ,"genArgs":"K,V"
            ,"superType":"monkey.Object"
            ,"classes":[
              {
                "ident":"Node"
                ,"flags":1
                ,"superType":"monkey.Object"
                ,"enums":[
                  {
                    "ident":"Color"
                    ,"flags":1
                  }
                ]
                ,"fields":[
                  {
                    "ident":"_color"
                    ,"flags":1
                    ,"type":"std.Color"
                  }
                  ,{
                    "ident":"_key"
                    ,"flags":1
                    ,"type":"K"
                  }
                  ,{
                    "ident":"_left"
                    ,"flags":1
                    ,"type":"std.Node"
                  }
                  ,{
                    "ident":"_parent"
                    ,"flags":1
                    ,"type":"std.Node"
                  }
                  ,{
                    "ident":"_right"
                    ,"flags":1
                    ,"type":"std.Node"
                  }
                  ,{
                    "ident":"_value"
                    ,"flags":1
                    ,"type":"V"
                  }
                ]
                ,"constructors":[
                  {
                    "ident":"new"
                  }
                ]
                ,"properties":[
                  {
                    "ident":"Key"
                    ,"flags":1
                    ,"type":"K"
                  }
                  ,{
                    "ident":"Value"
                    ,"flags":1
                    ,"type":"V"
                  }
                ]
                ,"methods":[
                  {
                    "ident":"Copy"
                    ,"overloads":[
                      {
                        "return":{
                          "type":"std.Node"
                        }
                      }
                    ]
                  }
                  ,{
                    "ident":"Count"
                    ,"overloads":[
                      {
                        "return":{
                          "type":"monkey.Int"
                        }
                      }
                    ]
                  }
                  ,{
                    "ident":"Key"
                    ,"overloads":[
                      {
                        "return":{
                          "type":"K"
                        }
                      }
                    ]
                  }
                  ,{
                    "ident":"NextNode"
                    ,"overloads":[
                      {
                        "return":{
                          "type":"std.Node"
                        }
                      }
                    ]
                  }
                  ,{
                    "ident":"PrevNode"
                    ,"overloads":[
                      {
                        "return":{
                          "type":"std.Node"
                        }
                      }
                    ]
                  }
                  ,{
                    "ident":"Value"
                    ,"overloads":[
                      {
                        "return":{
                          "type":"V"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
            ,"fields":[
              {
                "ident":"_root"
                ,"flags":2
                ,"type":"std.Node"
              }
            ]
            ,"properties":[
              {
                "ident":"Empty"
                ,"flags":1
                ,"type":"monkey.Bool"
              }
              ,{
                "ident":"Keys"
                ,"flags":1
                ,"type":"std.MapKeys"
              }
              ,{
                "ident":"Values"
                ,"flags":1
                ,"type":"std.MapValues"
              }
            ]
            ,"methods":[
              {
                "ident":"Add"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"Clear"
              }
              ,{
                "ident":"Contains"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"Count"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
              ,{
                "ident":"DeleteFixup"
              }
              ,{
                "ident":"Empty"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"FindNode"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.Node"
                    }
                  }
                ]
              }
              ,{
                "ident":"FirstNode"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.Node"
                    }
                  }
                ]
              }
              ,{
                "ident":"Get"
                ,"overloads":[
                  {
                    "return":{
                      "type":"V"
                    }
                  }
                ]
              }
              ,{
                "ident":"InsertFixup"
              }
              ,{
                "ident":"Iterator"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.MapIterator"
                    }
                  }
                ]
              }
              ,{
                "ident":"Keys"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.MapKeys"
                    }
                  }
                ]
              }
              ,{
                "ident":"LastNode"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.Node"
                    }
                  }
                ]
              }
              ,{
                "ident":"Remove"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"RemoveNode"
              }
              ,{
                "ident":"RotateLeft"
              }
              ,{
                "ident":"RotateRight"
              }
              ,{
                "ident":"Set"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"Update"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"Values"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.MapValues"
                    }
                  }
                ]
              }
              ,{
                "ident":"[]"
                ,"overloads":[
                  {
                    "return":{
                      "type":"V"
                    }
                  }
                ]
              }
              ,{
                "ident":"[]="
              }
            ]
          }
          ,{
            "ident":"ParamError"
            ,"flags":1
            ,"superType":"std.RuntimeError"
            ,"constructors":[
              {
                "ident":"new"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"message"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"Pixmap"
            ,"docs":"<p>Pixmap class.</p>\n\n<p>A pixmap contains a block of memory used to store image data.</p>\n"
            ,"flags":1
            ,"superType":"monkey.Object"
            ,"fields":[
              {
                "ident":"_data"
                ,"flags":2
                ,"type":"monkey.Ubyte Ptr"
              }
              ,{
                "ident":"_depth"
                ,"flags":2
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"_format"
                ,"flags":2
                ,"type":"std.PixmapFormat"
              }
              ,{
                "ident":"_height"
                ,"flags":2
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"_owner"
                ,"flags":2
                ,"type":"std.Pixmap"
              }
              ,{
                "ident":"_pitch"
                ,"flags":2
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"_width"
                ,"flags":2
                ,"type":"monkey.Int"
              }
            ]
            ,"constructors":[
              {
                "ident":"new"
                ,"docs":"<p>Creates a new pixmap.</p>\n\n<p>The pitch of a pixmap refers to the difference in bytes between one row of pixels in a pixmap and the next.</p>\n"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"width"
                        ,"docs":"<p>the width of the pixmap in pixels.</p>\n"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                      ,{
                        "ident":"height"
                        ,"docs":"<p>the height of the pixmap in pixels.</p>\n"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                      ,{
                        "ident":"format"
                        ,"docs":"<p>the pixmap format.</p>\n"
                        ,"flags":1
                        ,"type":"std.PixmapFormat"
                      }
                    ]
                  }
                  ,{
                    "params":[
                      {
                        "ident":"width"
                        ,"docs":"<p>the width of the pixmap in pixels.</p>\n"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                      ,{
                        "ident":"height"
                        ,"docs":"<p>the height of the pixmap in pixels.</p>\n"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                      ,{
                        "ident":"format"
                        ,"docs":"<p>the pixmap format.</p>\n"
                        ,"flags":1
                        ,"type":"std.PixmapFormat"
                        ,"default":"0"
                      }
                      ,{
                        "ident":"data"
                        ,"flags":1
                        ,"type":"monkey.Ubyte Ptr"
                      }
                      ,{
                        "ident":"pitch"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                      ,{
                        "ident":"owner"
                        ,"flags":1
                        ,"type":"std.Pixmap"
                      }
                    ]
                  }
                ]
              }
            ]
            ,"properties":[
              {
                "ident":"Data"
                ,"docs":"<p>The pixmap data.</p>\n"
                ,"flags":1
                ,"type":"monkey.Ubyte Ptr"
              }
              ,{
                "ident":"Depth"
                ,"docs":"<p>The pixmap depth. </p>\n\n<p>This is the number of bytes per pixel.</p>\n"
                ,"flags":1
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"Format"
                ,"docs":"<p>The pixmap format.</p>\n"
                ,"flags":1
                ,"type":"std.PixmapFormat"
              }
              ,{
                "ident":"Height"
                ,"docs":"<p>The pixmap height in pixels.</p>\n"
                ,"flags":1
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"Ownder"
                ,"flags":1
                ,"type":"std.Pixmap"
              }
              ,{
                "ident":"Pitch"
                ,"docs":"<p>The pixmap pitch.</p>\n\n<p>This is the number of bytes between one row of pixels in the pixmap and the next.</p>\n"
                ,"flags":1
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"Width"
                ,"docs":"<p>The pixmap width in pixels.</p>\n"
                ,"flags":1
                ,"type":"monkey.Int"
              }
            ]
            ,"methods":[
              {
                "ident":"ClearARGB"
                ,"docs":"<p>Clears a pixmap.</p>\n\n<p>Clears the pixmap to &#39;color&#39;.</p>\n\n<p>&#39;color&#39; should be in ARGB format.</p>\n"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"color"
                        ,"docs":"<p>the color to clear the pixmap.</p>\n"
                        ,"flags":1
                        ,"type":"monkey.Uint"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"Convert"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.Pixmap"
                    }
                    ,"params":[
                      {
                        "ident":"format"
                        ,"flags":1
                        ,"type":"std.PixmapFormat"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"Copy"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.Pixmap"
                    }
                  }
                ]
              }
              ,{
                "ident":"Data"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Ubyte Ptr"
                    }
                  }
                ]
              }
              ,{
                "ident":"Depth"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
              ,{
                "ident":"Format"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.PixmapFormat"
                    }
                  }
                ]
              }
              ,{
                "ident":"GetPixelARGB"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Uint"
                    }
                    ,"params":[
                      {
                        "ident":"x"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                      ,{
                        "ident":"y"
                        ,"flags":1
                        ,"type":"monkey.Int"
                      }
                    ]
                  }
                ]
              }
              ,{
                "ident":"Height"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"RuntimeError"
            ,"flags":1
            ,"superType":"monkey.Object"
            ,"fields":[
              {
                "ident":"_message"
                ,"flags":2
                ,"type":"monkey.String"
              }
            ]
            ,"constructors":[
              {
                "ident":"new"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"message"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
            ]
            ,"properties":[
              {
                "ident":"Message"
                ,"flags":1
                ,"type":"monkey.String"
              }
            ]
            ,"methods":[
              {
                "ident":"Message"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"Stack"
            ,"flags":1
            ,"genArgs":"T"
            ,"superType":"monkey.Object"
            ,"ifaceTypes":["std.IContainer<T>"]
            ,"fields":[
              {
                "ident":"_data"
                ,"flags":1
                ,"type":"T[]"
              }
              ,{
                "ident":"_length"
                ,"flags":1
                ,"type":"monkey.Int"
              }
            ]
            ,"constructors":[
              {
                "ident":"new"
                ,"docs":"<p>Creates a new empty stack.\nCreates a new stack with an initial length.</p>\n\n<pre><code>Each element of the stack is initialized to null.\n\n@param length The initial stack length.\n</code></pre>\n\n<p>Creates a new stack with the contents of an array.</p>\n\n<pre><code>@param data The array to create the stack with.\n</code></pre>\n"
              }
            ]
            ,"properties":[
              {
                "ident":"Capacity"
                ,"docs":"<p>Gets the capacity of the stack.</p>\n\n<pre><code>The capacity of a stack is the number of values it can contain before memory needs to be reallocated to store more values.\n\nIf a stack&#39;s length equals its capacity, then the next Push or Insert operation will need to allocate more memory to &#39;grow&#39; the stack.\n\nYou don&#39;t normally need to worry about stack capacity, but it can be useful to use [[Reserve]] to &#39;preallocate&#39; stack storage if you know in advance\nhow many values a stack is likely to contain, in order to prevent the overhead of excessive memory allocation.\n\n@return The current stack capacity.\n</code></pre>\n"
                ,"flags":1
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"Data"
                ,"flags":1
                ,"type":"T[]"
              }
              ,{
                "ident":"Empty"
                ,"docs":"<p>Checks if the stack is empty.</p>\n\n<pre><code>@return True if stack is empty.\n</code></pre>\n"
                ,"flags":1
                ,"type":"monkey.Bool"
              }
              ,{
                "ident":"Length"
                ,"docs":"<p>Gets the number of values in the stack.</p>\n\n<pre><code>@return The number of values in the stack.\n</code></pre>\n"
                ,"flags":1
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"Top"
                ,"docs":"<p>Gets the top element of the stack</p>\n\n<pre><code>@return The top element of the stack.\n</code></pre>\n"
                ,"flags":1
                ,"type":"T"
              }
            ]
            ,"methods":[
              {
                "ident":"Append"
                ,"docs":"<p>Pushes the values in an array on the stack.</p>\n\n<pre><code>@param data The array to push.\n</code></pre>\n\n<p>Pushes the values in a container on the stack.</p>\n\n<pre><code>The container must contain values of the same type as the stack.\n\n@param container The container to push.\n</code></pre>\n"
              }
              ,{
                "ident":"Capacity"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
              ,{
                "ident":"Clear"
                ,"docs":"<p>Clears the stack.</p>\n"
              }
              ,{
                "ident":"Contains"
                ,"docs":"<p>Checks if the stack contains a value.</p>\n\n<pre><code>@param value The value to check.\n\n@return True if the stack contains the value, else false.\n</code></pre>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"Data"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T[]"
                    }
                  }
                ]
              }
              ,{
                "ident":"Empty"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"Erase"
                ,"docs":"<p>Erases an element at an index.</p>\n\n<pre><code>If `index` is out of range, a RuntimeError exception is thrown.\n\n@param index The index of the element to erase.\n</code></pre>\n\n<p>Erases the elements in a range.</p>\n\n<pre><code>If `index1` or `index2` is out of range or `index2`&lt;`index1` a ParamError exception is thrown.\n\nThe number of elements actually erased is `index2`-`index1`&#39;.\n\n@param index1 The first element to erase.\n\n@param index2 the last+1 element to erase.\n</code></pre>\n"
              }
              ,{
                "ident":"Find"
                ,"docs":"<p>Finds the index of a value in the stack.</p>\n\n<pre><code>@param value The value to find.\n\n@return The index of the value in the stack, or -1 if the value is not found.\n</code></pre>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
              ,{
                "ident":"Get"
                ,"docs":"<p>Gets the value of an element.</p>\n\n<pre><code>@param index The index of the element to get.\n</code></pre>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T"
                    }
                  }
                ]
              }
              ,{
                "ident":"GetIterator"
                ,"docs":"<p>Gets an iterator.</p>\n\n<pre><code>@return An iterator\n</code></pre>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.Iterator"
                    }
                  }
                ]
              }
              ,{
                "ident":"Length"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
              ,{
                "ident":"Pop"
                ,"docs":"<p>Pops the top element off a stack and returns it.</p>\n\n<pre><code>@return The top element of the stack before it was popped.\n</code></pre>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T"
                    }
                  }
                ]
              }
              ,{
                "ident":"Push"
                ,"docs":"<p>Pushes a value on the stack.</p>\n\n<pre><code>@param value The value to push.\n</code></pre>\n"
              }
              ,{
                "ident":"Remove"
                ,"docs":"<p>Finds and removes the first matching value from a stack.</p>\n\n<pre><code>@param value The value to remove.\n</code></pre>\n"
              }
              ,{
                "ident":"RemoveEach"
                ,"docs":"<p>Finds and removes each matching value from a stack.</p>\n\n<pre><code>@param value The value to remove.\n</code></pre>\n"
              }
              ,{
                "ident":"Reserve"
                ,"docs":"<p>Reserves stack storage capacity.</p>\n\n<pre><code>@param capacity The new capacity.\n</code></pre>\n"
              }
              ,{
                "ident":"Resize"
                ,"docs":"<p>Resizes the stack.</p>\n\n<pre><code>If `length` is greater than the current stack length, extra elements are initialized to null.\n\n@param length The new length of the stack.\n</code></pre>\n"
              }
              ,{
                "ident":"Set"
                ,"docs":"<p>Sets the value of an element.</p>\n\n<pre><code>@param index The index of the element to set.\n</code></pre>\n"
              }
              ,{
                "ident":"Slice"
                ,"docs":"<p>Returns a range of elements from the stack</p>\n\n<pre><code>Returns a slice of the stack consisting of all elements from `index` to the end of the stack.\n\nIf `index` is negative, then it represents an offset from the end of the stack.\n\n@param index1 the index of the first element.\n\n@return A new stack.\n</code></pre>\n\n<p>Returns a range of elements from the stack.</p>\n\n<pre><code>Returns a slice of the stack consisting of all elements from `index1` up to but not including `index2`.\n\nIf either index is negative, then it represents an offset from the end of the stack.\n\n@param index1 The index of the first element.\n\n@param index2 The index of the last+1 element.\n\n@return A new stack.\n</code></pre>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.Stack<T>"
                    }
                  }
                  ,{
                    "return":{
                      "type":"std.Stack<T>"
                    }
                  }
                ]
              }
              ,{
                "ident":"Sort"
                ,"docs":"<p>Sorts the stack.</p>\n\n<pre><code>@param ascending True to sort the stack in ascending order, false to sort in descending order.\n</code></pre>\n\n<p>Sorts the stack using a comparison function.</p>\n\n<pre><code>@param compareFunc The function used to compare values.\n</code></pre>\n\n<p>Sorts a range of stack elements using a comparison function.</p>\n\n<pre><code>@param lo The first element.\n\n@param hi The last element.\n\n@param compareFunc The function used to compare values.\n</code></pre>\n"
              }
              ,{
                "ident":"Swap"
                ,"docs":"<p>Swaps 2 elements in the stack.</p>\n\n<pre><code>@param index1 The index of the first element.\n\n@param index2 The index of the second element.\n</code></pre>\n"
              }
              ,{
                "ident":"ToArray"
                ,"docs":"<p>Converts the stack to an array.</p>\n\n<pre><code>@return An array containing each element of the stack.\n</code></pre>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T[]"
                    }
                  }
                ]
              }
              ,{
                "ident":"Top"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T"
                    }
                  }
                ]
              }
              ,{
                "ident":"[]"
                ,"docs":"<p>Gets the value an element.</p>\n\n<pre><code>@param index The index of the element to get.\n</code></pre>\n"
                ,"overloads":[
                  {
                    "return":{
                      "type":"T"
                    }
                  }
                ]
              }
              ,{
                "ident":"[]="
                ,"docs":"<p>Sets the value of an element</p>\n\n<pre><code>@param index The index of the element to set.\n</code></pre>\n"
              }
            ]
          }
          ,{
            "ident":"Stream"
            ,"flags":1
            ,"superType":"monkey.Object"
            ,"aliases":[
              {
                "ident":"OpenFunc"
                ,"flags":1
                ,"type":"std.Stream(monkey.String,monkey.String,monkey.String)"
              }
            ]
            ,"constants":[
              {
                "ident":"OpenFuncs"
                ,"flags":1
                ,"type":"std.StringMap<std.Stream(monkey.String,monkey.String,monkey.String)>"
              }
            ]
            ,"properties":[
              {
                "ident":"Eof"
                ,"flags":1
                ,"type":"monkey.Bool"
              }
              ,{
                "ident":"Length"
                ,"flags":1
                ,"type":"monkey.Int"
              }
              ,{
                "ident":"Position"
                ,"flags":1
                ,"type":"monkey.Int"
              }
            ]
            ,"methods":[
              {
                "ident":"Close"
              }
              ,{
                "ident":"Eof"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Bool"
                    }
                  }
                ]
              }
              ,{
                "ident":"Length"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.Int"
                    }
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"StringList"
            ,"flags":1
            ,"superType":"std.List<monkey.String>"
          }
          ,{
            "ident":"StringMap"
            ,"flags":1
            ,"genArgs":"T"
            ,"superType":"std.Map<monkey.String,T>"
          }
          ,{
            "ident":"StringStack"
            ,"flags":1
            ,"superType":"std.Stack<monkey.String>"
            ,"methods":[
              {
                "ident":"Join"
                ,"overloads":[
                  {
                    "return":{
                      "type":"monkey.String"
                    }
                    ,"params":[
                      {
                        "ident":"separator"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"ZipStream"
            ,"flags":1
            ,"superType":"std.DataStream"
            ,"constructors":[
              {
                "ident":"new"
                ,"overloads":[
                  {
                    "params":[
                      {
                        "ident":"buf"
                        ,"flags":1
                        ,"type":"std.DataBuffer"
                      }
                    ]
                  }
                ]
              }
            ]
            ,"functions":[
              {
                "ident":"Open"
                ,"overloads":[
                  {
                    "return":{
                      "type":"std.ZipStream"
                    }
                    ,"params":[
                      {
                        "ident":"path"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                      ,{
                        "ident":"mode"
                        ,"flags":1
                        ,"type":"monkey.String"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
        ,"functions":[
          {
            "ident":"Assert"
            ,"docs":"<p>Asserts a condition is true</p>\n"
            ,"overloads":[
              {
                "params":[
                  {
                    "ident":"condition"
                    ,"docs":"<p>Condition to assert</p>\n"
                    ,"flags":1
                    ,"type":"monkey.Bool"
                  }
                  ,{
                    "ident":"message"
                    ,"docs":"<p>Message to throw if condition is false</p>\n"
                    ,"flags":1
                    ,"type":"monkey.String"
                    ,"default":"Null"
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"AssertParam"
            ,"docs":"<p>Asserts a condition is true</p>\n"
            ,"overloads":[
              {
                "params":[
                  {
                    "ident":"condition"
                    ,"docs":"<p>Condition to assert</p>\n"
                    ,"flags":1
                    ,"type":"monkey.Bool"
                  }
                  ,{
                    "ident":"message"
                    ,"docs":"<p>Message to throw if condition is false</p>\n"
                    ,"flags":1
                    ,"type":"monkey.String"
                    ,"default":"Null"
                  }
                ]
              }
            ]
          }
          ,{
            "ident":"Main"
          }
        ]
      }
    ]
  }
}